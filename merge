package com.striner.java.test01;

import java.util.Arrays;

public class Merge88 {

    //88. 合并两个有序数组
    //给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
    //
    //初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。
    //
    //示例 1：
    //输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
    //输出：[1,2,2,3,5,6]
    //
    //示例 2：
    //输入：nums1 = [1], m = 1, nums2 = [], n = 0
    //输出：[1]
    //
    //提示：
    //nums1.length == m + n
    //nums2.length == n
    //0 <= m, n <= 200
    //1 <= m + n <= 200
    //-109 <= nums1[i], nums2[i] <= 109
    //https://leetcode-cn.com/problems/merge-sorted-array/
    public static void main(String[] args) {

        int[] nums1 = new int[]{1,2,3,0,0,0};
        int[] nums2 = new int[]{2,5,6};
        int m = nums1.length-nums2.length;
        int n = nums2.length;

        Merge88 merge = new Merge88();
        merge.merge(nums1, m, nums2, n);
        System.out.println(Arrays.toString(nums1));
    }
    public void merge(int[] nums1, int m, int[] nums2, int n) {


        int p1 = m -1;
        int p2 = n-1;
        while(p1 >= 0 || p2 >= 0) {
            if (p1 < 0 && p2 >= 0) {
                nums1[p2] = nums2[p2];
                p2--;
            }
            if(p2 < 0 && p1 >= 0) {
                nums1[p1] = nums1[p1];
                p1--;
            }
            if(p1 >= 0 && p2 >= 0) {
                if (nums1[p1] >= nums2[p2]) {
                    nums1[p1 + p2 + 1] = nums1[p1];
                    p1--;
                } else {
                    nums1[p1 + p2 + 1] = nums2[p2];
                    p2--;
                }
            }
        }
    }
}
//执行结果： 通过
//执行用时： 0 ms , 在所有 Java 提交中击败了 100.00% 的用户
//内存消耗： 38.5 MB , 在所有 Java 提交中击败了 58.84% 的用户
