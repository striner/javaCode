package com.striner.java.test01;

import java.util.*;

public class LevelOrder102 {

    //102. 二叉树的层序遍历
    //给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。
    //
    //示例：
    //二叉树：[3,9,20,null,null,15,7],
    //
    //    3
    //   / \
    //  9  20
    //    /  \
    //   15   7
    //返回其层序遍历结果：
    //
    //[
    //  [3],
    //  [9,20],
    //  [15,7]
    //]
    //
    //来源：力扣（LeetCode）
    //链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal
    public static void main(String[] args) {
        // [1,2,3,4,null,null,5]
        TreeNode root = new TreeNode(1, new TreeNode(2, new TreeNode(4, null, null), null), new TreeNode(3, null, new TreeNode(5, null, null)));
//        TreeNode root = new TreeNode(3, new TreeNode(9, null, null), new TreeNode(20, new TreeNode(15, null, null), new TreeNode(7, null, null)));
        LevelOrder102 levelOrder = new LevelOrder102();
        System.out.println(levelOrder.levelOrder(root));
    }

    public List<List<Integer>> levelOrder(TreeNode root) {

        if (root == null) {
            return new ArrayList<>();
        }

        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<Integer>() {{
            add(root.val);
        }});


        if (root.left == null && root.right == null) {
            return result;
        }

        queue.add(root);
        while (!queue.isEmpty()) {
            List<Integer> nodeList = new ArrayList<>();
            Queue<TreeNode> tempQueue = new LinkedList<>();
            while(!queue.isEmpty()) {
                TreeNode head = queue.poll();
                if (head.left != null) {
                    tempQueue.add(head.left);
                    nodeList.add(head.left.val);
                }
                if (head.right != null) {
                    tempQueue.add(head.right);
                    nodeList.add(head.right.val);
                }
            }
            queue = tempQueue;
            if (nodeList.size() > 0) result.add(nodeList);
        }

        return result;
    }
}

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
//执行结果： 通过
//执行用时： 1 ms , 在所有 Java 提交中击败了 94.69% 的用户
//内存消耗： 38.7 MB , 在所有 Java 提交中击败了 57.18% 的用户
