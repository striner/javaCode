package com.striner.java.jzOffer;

public class Search53 {

    //剑指 Offer 53 - I. 在排序数组中查找数字 I
    //统计一个数字在排序数组中出现的次数。
    //
    //
    //
    //示例 1:
    //
    //输入: nums = [5,7,7,8,8,10], target = 8
    //输出: 2
    //示例 2:
    //
    //输入: nums = [5,7,7,8,8,10], target = 6
    //输出: 0
    //
    //
    //提示：
    //
    //0 <= nums.length <= 105
    //-109 <= nums[i] <= 109
    //nums 是一个非递减数组
    //-109 <= target <= 109
    //
    //https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/
    public static void main(String[] args) {

        Search53 search53 = new Search53();
        int[] nums = new int[]{5,7,7,8,8,10};
        System.out.println(search53.search(nums, 8));
    }

    public int search(int[] nums, int target) {

        if(nums.length == 0) return 0;
        return search(nums, target, 0, nums.length - 1);
    }


    public int search(int[] nums, int target, int start, int end) {

        // 二分查找
        if(end < start) return 0;
        if(end == start) return nums[end] == target ? 1 : 0;

        int mid = (start + end)/2;
        if(target > nums[mid]) {
            return search(nums, target, mid+1, end);
        }
        if(target < nums[mid]) {
            return search(nums, target, start, mid-1);
        }

        // 查找后开始计数
        int sum = 0;
        int i = mid;
        int j = mid+1;
        while(i >= start && nums[i] == target) {
            i--;
            sum++;
        }
        while(j <= end && nums[j] == target) {
            j++;
            sum++;
        }
        return sum;
    }
}
//执行结果： 通过
//执行用时： 0 ms , 在所有 Java 提交中击败了 100.00% 的用户
//内存消耗： 41.4 MB , 在所有 Java 提交中击败了 28.01% 的用户
