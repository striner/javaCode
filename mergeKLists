package com.striner.java.leetcode.test01;

import java.util.*;

public class MergeKLists23 {

    // 23. 合并K个升序链表
    //给你一个链表数组，每个链表都已经按升序排列。
    //
    //请你将所有链表合并到一个升序链表中，返回合并后的链表。
    //
    //
    //
    //示例 1：
    //
    //输入：lists = [[1,4,5],[1,3,4],[2,6]]
    //输出：[1,1,2,3,4,4,5,6]
    //解释：链表数组如下：
    //[
    //  1->4->5,
    //  1->3->4,
    //  2->6
    //]
    //将它们合并到一个有序链表中得到。
    //1->1->2->3->4->4->5->6
    //示例 2：
    //
    //输入：lists = []
    //输出：[]
    //示例 3：
    //
    //输入：lists = [[]]
    //输出：[]
    //
    //
    //提示：
    //
    //k == lists.length
    //0 <= k <= 10^4
    //0 <= lists[i].length <= 500
    //-10^4 <= lists[i][j] <= 10^4
    //lists[i] 按 升序 排列
    //lists[i].length 的总和不超过 10^4
    //https://leetcode-cn.com/problems/merge-k-sorted-lists/
    public static void main(String[] args) {

        ListNode23 node1 = new ListNode23(1, new ListNode23(4, new ListNode23(5, null)));
        ListNode23 node2 = new ListNode23(1, new ListNode23(3, new ListNode23(4, null)));
        ListNode23 node3 = new ListNode23(2, new ListNode23(6, null));

        ListNode23[] listNode23s = new ListNode23[]{node1, node2, node3};
        MergeKLists23 mergeKLists23 = new MergeKLists23();
        ListNode23 node23 = mergeKLists23.mergeKLists(listNode23s);
        while(node23 != null) {
            System.out.print(node23.val + " - ");
            node23 = node23.next;
        }
    }

    public ListNode23 mergeKLists(ListNode23[] lists) {

        if(lists.length <= 1) return lists.length == 1 ? lists[0] : null;


        ListNode23 root = new ListNode23();
        ListNode23 cur = root;

        // 使用优先队列存储每组的第一个节点
        PriorityQueue<ListNode23> queue = new PriorityQueue<>(Comparator.comparingInt(o -> o.val));

        for (ListNode23 list : lists) {
            if (list == null) {
                continue;
            }
            queue.add(list);
        }


        while(!queue.isEmpty()) {

            // 取队列中最小的节点，并将下一个节点放到队列中
            ListNode23 minTemp = queue.poll();
            ListNode23 minNext = minTemp.next;
            if(minNext != null) queue.add(minNext);

            // 取出的最小节点挂到root上，并断掉最小节点后续的串
            cur.next = minTemp;
            cur = minTemp;
            minTemp.next = null;
            if(minNext != null) queue.add(minNext);
        }

        return root.next;
    }


}
class ListNode23 {
    int val;
    ListNode23 next;
    ListNode23() {}
    ListNode23(int val) { this.val = val; }
    ListNode23(int val, ListNode23 next) { this.val = val; this.next = next; }
}

//执行结果： 通过
//执行用时： 7 ms , 在所有 Java 提交中击败了 37.74% 的用户
//内存消耗： 39.7 MB , 在所有 Java 提交中击败了 90.15% 的用户
