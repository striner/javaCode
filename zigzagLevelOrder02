package com.striner.java.leetcode.test01;

import java.util.*;

public class ZigzagLevelOrder103 {

    // 103. 二叉树的锯齿形层序遍历
    //给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。
    //
    //例如：
    //给定二叉树 [3,9,20,null,null,15,7],
    //
    //    3
    //   / \
    //  9  20
    //    /  \
    //   15   7
    //返回锯齿形层序遍历如下：
    //
    //[
    //  [3],
    //  [20,9],
    //  [15,7]
    //]
    //https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/
    public static void main(String[] args) {

        // [1,2,3,4,null,null,5]
        TreeNode root = new TreeNode(1, new TreeNode(2, new TreeNode(4, null, null), null), new TreeNode(3, null, new TreeNode(5, null, null)));
        ZigzagLevelOrder103 zigzagLevelOrder103 = new ZigzagLevelOrder103();
        zigzagLevelOrder103.zigzagLevelOrder(root);
    }


    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {

        List<List<Integer>> rus = new ArrayList<>();


        if(root == null) return rus;

        List<Integer> rootNodeVal = new ArrayList<>();
        rootNodeVal.add(root.val);
        Stack<TreeNode> stack = new Stack<>();
        rus.add(rootNodeVal);
        stack.add(root);

        boolean flag = false; // true-顺序 false-逆序

        while(!stack.isEmpty()) {
            Stack<TreeNode> tempStack = new Stack<>();
            List<Integer> temp = new ArrayList<>();
            while(!stack.isEmpty()) {


                TreeNode tempNode = stack.pop();
                if(!flag) {
                    if(tempNode.left != null) {
                        temp.add(tempNode.left.val);
                        tempStack.push(tempNode.left);
                    }
                    if(tempNode.right != null) {
                        temp.add(tempNode.right.val);
                        tempStack.push(tempNode.right);
                    }
                } else {
                    if(tempNode.right != null) {
                        temp.add(tempNode.right.val);
                        tempStack.push(tempNode.right);
                    }
                    if(tempNode.left != null) {
                        temp.add(tempNode.left.val);
                        tempStack.push(tempNode.left);
                    }
                }

            }
            flag = !flag;
            if(!temp.isEmpty()) {
                rus.add(temp);
            }
            stack = tempStack;
        }

        return rus;
    }
}
//执行结果：通过
//执行用时： 1 ms , 在所有 Java 提交中击败了 92.97% 的用户
//内存消耗： 38.4 MB , 在所有 Java 提交中击败了 71.58% 的用户
