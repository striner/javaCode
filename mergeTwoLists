package com.striner.java.test01;

public class MergeTwoLists21 {

    //21. 合并两个有序链表
    //将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
    //
    //示例 1：
    //输入：l1 = [1,2,4], l2 = [1,3,4]
    //输出：[1,1,2,3,4,4]
    //
    //示例 2：
    //输入：l1 = [], l2 = []
    //输出：[]
    //
    //示例 3：
    //输入：l1 = [], l2 = [0]
    //输出：[0]
    //
    //提示：
    //两个链表的节点数目范围是 [0, 50]
    //-100 <= Node.val <= 100
    //l1 和 l2 均按 非递减顺序 排列
    //
    //https://leetcode-cn.com/problems/merge-two-sorted-lists/
    public static void main(String[] args) {

        ListNode l1 = new ListNode(1, new ListNode(2, new ListNode(4, null)));
        ListNode l2 = new ListNode(1, new ListNode(3, new ListNode(4, null)));
//        ListNode l1 = null;
//        ListNode l2 = new ListNode(0, null);
        MergeTwoLists21 mergeTwoLists = new MergeTwoLists21();
        ListNode listNode = mergeTwoLists.mergeTwoLists(l1, l2);
        while (listNode != null) {
            System.out.print(listNode.val + " ");
            listNode = listNode.next;
        }
    }


    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {

        if (l1 == null) return l2;
        if (l2 == null) return l1;

        ListNode head = new ListNode();
        ListNode tail = head;
        while (l1 != null && l2 != null) {

            ListNode temp = null;
            if (l1.val <= l2.val) {
                temp = l1;
                l1 = l1.next;
            } else {
                temp = l2;
                l2 = l2.next;
            }
            temp.next = null; // 将头节点摘除出来
            tail.next = temp; // 将最小头节点挂到head链的链尾
            tail = temp; // tail后移继续指向最后一个节点
        }
        if (l1 != null) tail.next = l1;
        if (l2 != null) tail.next = l2;

        return head.next;
    }
}

class ListNode {
    int val;
    ListNode next;

    ListNode() {
    }

    ListNode(int val) {
        this.val = val;
    }

    ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }
}

