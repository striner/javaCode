package com.striner.test;

import java.util.ArrayList;
import java.util.List;

public class Permute46 {

    // 46. 全排列
    //给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。
    //
    //
    //
    //示例 1：
    //
    //输入：nums = [1,2,3]
    //输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
    //示例 2：
    //
    //输入：nums = [0,1]
    //输出：[[0,1],[1,0]]
    //示例 3：
    //
    //输入：nums = [1]
    //输出：[[1]]
    //
    //
    //提示：
    //
    //1 <= nums.length <= 6
    //-10 <= nums[i] <= 10
    //nums 中的所有整数 互不相同
    //https://leetcode-cn.com/problems/permutations/
    public static void main(String[] args) {

        int[] nums = new int[]{1, 2, 3};
        Permute46 permute46 = new Permute46();
        List<List<Integer>> permute = permute46.permute(nums);
    }

    public List<List<Integer>> permute(int[] nums) {

        int len = nums.length;
        if (len == 1) return new ArrayList<List<Integer>>() {{
            add(new ArrayList<Integer>() {{
                add(nums[0]);
            }});
        }};

        List<List<Integer>> result = new ArrayList<>();
        permute(nums, 0, nums.length, result);

        return result;
    }

    public void permute(int[] nums, int start, int end, List<List<Integer>> result) {


        if(start == end-1) {
            List<Integer> list = new ArrayList<>();
            for(int num : nums) {
                list.add(num);
            }
            result.add(list);
            return;
        }
        for (int i = start; i < end; i++) {

            // 交换思想，试探
            swap(nums, i, start);
            permute(nums, start + 1, end, result);
            // 回溯
            swap(nums, i, start);
        }

    }

    public void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}
//执行结果： 通过
//执行用时： 1 ms , 在所有 Java 提交中击败了 97.67% 的用户
//内存消耗： 38.8 MB , 在所有 Java 提交中击败了 22.18% 的用户

