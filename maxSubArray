package com.striner.java.test01;

public class MaxSubArray53 {

    // 53. 最大子序和
    //给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
    //
    //示例 1：
    //输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
    //输出：6
    //解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
    //
    //示例 2：
    //输入：nums = [1]
    //输出：1
    //
    //示例 3：
    //输入：nums = [0]
    //输出：0
    //
    //示例 4：
    //输入：nums = [-1]
    //输出：-1
    //
    //示例 5：
    //输入：nums = [-100000]
    //输出：-100000
    //
    // https://leetcode-cn.com/problems/maximum-subarray/
    public static void main(String[] args) {

        int[] nums = new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4};
        MaxSubArray53 maxSubArray = new MaxSubArray53();
        System.out.println(maxSubArray.maxSubArray(nums));
    }

    public int maxSubArray(int[] nums) {

        if (nums.length == 1) {
            return nums[0];
        }

        int[] maxArray = new int[nums.length];
        maxArray[0] = nums[0];

        for (int i = 1; i < nums.length; i++) {
            maxArray[i] = maxArray[i - 1] > 0 ? maxArray[i - 1] + nums[i] : nums[i];
        }

        int max = maxArray[0];
        for (int i = 1; i < nums.length; i++) {
            max = Math.max(max, maxArray[i]);
        }

        return max;
    }
    
    //执行结果： 通过
    //显示详情
    //执行用时： 1 ms , 在所有 Java 提交中击败了 94.80% 的用户
    //内存消耗： 38.3 MB , 在所有 Java 提交中击败了 69.19% 的用户
}
