package com.striner.java.test;

import com.striner.java.common.ListNode;

public class ReverseKGroup25 {

    /**
     * 25. K 个一组翻转链表
     * 给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。
     * <p>
     * k 是一个正整数，它的值小于或等于链表的长度。
     * <p>
     * 如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。
     * <p>
     * 进阶：
     * 你可以设计一个只使用常数额外空间的算法来解决此问题吗？
     * 你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。
     * <p>
     * 示例 1：
     * 输入：head = [1,2,3,4,5], k = 2
     * 输出：[2,1,4,3,5]
     * <p>
     * 示例 2：
     * 输入：head = [1,2,3,4,5], k = 3
     * 输出：[3,2,1,4,5]
     * <p>
     * 示例 3：
     * 输入：head = [1,2,3,4,5], k = 1
     * 输出：[1,2,3,4,5]
     * <p>
     * 示例 4：
     * 输入：head = [1], k = 1
     * 输出：[1]
     * <p>
     * 提示：
     * 列表中节点的数量在范围 sz 内
     * 1 <= sz <= 5000
     * 0 <= Node.val <= 1000
     * 1 <= k <= sz
     * <p>
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/reverse-nodes-in-k-group
     */
    public static void main(String[] args) {

        ReverseKGroup25 reverseKGroup = new ReverseKGroup25();

        ListNode head = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5, null)))));
        int k = 1;
        ListNode listNode = reverseKGroup.reverseKGroup(head, k);
        while (listNode != null) {
            System.out.println(listNode.val);
            listNode = listNode.next;
        }
    }


    public ListNode reverseKGroup(ListNode head, int k) {

        ListNode preNode = new ListNode();
        preNode.next = head;
        ListNode endNode = head;
        int indexNum = 0;

        while (endNode != null) {
            indexNum++;

            if (indexNum % k == 0) {

                // 断开前后串
                ListNode nextNode = endNode.next;
                ListNode startNode = preNode.next;
                preNode.next = null;
                endNode.next = null;

                // 反转 startNode - endNode 之间的所有节点
                ListNode preTemp = null;
                ListNode curTemp = startNode;
                while (curTemp != null) {
                    ListNode temp = curTemp.next;
                    curTemp.next = preTemp;
                    preTemp = curTemp;
                    curTemp = temp;
                }

                // 拼接前后串
                preNode.next = preTemp;
                startNode.next = nextNode;

                endNode = nextNode;
                if (indexNum == k) {
                    // head 指回头节点
                    head = preNode.next;
                }
                preNode = startNode;

            } else {
                endNode = endNode.next;
            }
        }


        return head;
    }
}




