package com.striner.java.leetcode.test01;

public class MinPathSum64 {

    //64. 最小路径和
    //给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
    //
    //说明：每次只能向下或者向右移动一步。
    //示例 1：
    //
    //
    //输入：grid = [[1,3,1],[1,5,1],[4,2,1]]
    //输出：7
    //解释：因为路径 1→3→1→1→1 的总和最小。
    //示例 2：
    //
    //输入：grid = [[1,2,3],[4,5,6]]
    //输出：12
    // 
    //
    //提示：
    //
    //m == grid.length
    //n == grid[i].length
    //1 <= m, n <= 200
    //0 <= grid[i][j] <= 100
    //
    //来源：力扣（LeetCode）
    //链接：https://leetcode-cn.com/problems/minimum-path-sum
    public static void main(String[] args) {

        int[][] grid = new int[][]{{1, 2, 3}, {4, 5, 6}};
        MinPathSum64 minPathSum64 = new MinPathSum64();
        System.out.println(minPathSum64.minPathSum(grid));
    }


    public int minPathSum(int[][] grid) {

        int[][] minArray = new int[grid.length][grid[0].length];
        minArray[0][0] = grid[0][0];

        for (int i = 1; i < grid.length; i++) {
            minArray[i][0] = minArray[i - 1][0] + grid[i][0];
        }

        for (int j = 1; j < grid[0].length; j++) {
            minArray[0][j] = minArray[0][j - 1] + grid[0][j];
        }

        for (int i = 1; i < grid.length; i++) {
            for (int j = 1; j < grid[0].length; j++) {
                minArray[i][j] = Math.min(minArray[i - 1][j], minArray[i][j - 1]) + grid[i][j];
            }
        }

        return minArray[grid.length - 1][grid[0].length - 1];
    }
}

//执行结果： 通过
//
//执行用时： 2 ms , 在所有 Java 提交中击败了 97.52% 的用户
//内存消耗： 40.9 MB , 在所有 Java 提交中击败了 89.36% 的用户
