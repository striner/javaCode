package com.striner.java.jzOffer;

public class GetKthFromEnd22 {

    // 剑指 Offer 22. 链表中倒数第k个节点
    //输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。
    //
    //例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。
    //
    //
    //
    //示例：
    //
    //给定一个链表: 1->2->3->4->5, 和 k = 2.
    //
    //返回链表 4->5.
    // https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/
    public static void main(String[] args) {
        ListNode22 node1 = new ListNode22(1);
        ListNode22 node2 = new ListNode22(2);
        ListNode22 node3 = new ListNode22(3);
        ListNode22 node4 = new ListNode22(4);
        ListNode22 node5 = new ListNode22(5);
        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node5;
        int k = 2;
        GetKthFromEnd22 getKthFromEnd = new GetKthFromEnd22();
        System.out.println(getKthFromEnd.getKthFromEnd(node1, k).val);
    }

    public ListNode22 getKthFromEnd(ListNode22 head, int k) {

        if (k <= 0) return null;

        ListNode22 index = head;
        while(k > 0) {
            index = index.next;
            k--;
        }

        while (index != null) {
            index = index.next;
            head = head.next;
        }

        return head;
    }
}
class ListNode22 {
    int val;
    ListNode22 next;
    ListNode22(int x) { val = x; }
}

//执行结果： 通过
//执行用时： 0 ms , 在所有 Java 提交中击败了 100.00% 的用户
//内存消耗： 36.4 MB , 在所有 Java 提交中击败了 21.31% 的用户
