package com.striner.java.test01;

import java.util.ArrayList;
import java.util.List;

public class InorderTraversal94 {

    // 94. 二叉树的中序遍历
    //给定一个二叉树的根节点 root ，返回它的 中序 遍历。
    //
    //
    //
    //示例 1：
    //
    //
    //输入：root = [1,null,2,3]
    //输出：[1,3,2]
    //示例 2：
    //
    //输入：root = []
    //输出：[]
    //示例 3：
    //
    //输入：root = [1]
    //输出：[1]
    //示例 4：
    //
    //
    //输入：root = [1,2]
    //输出：[2,1]
    //示例 5：
    //
    //
    //输入：root = [1,null,2]
    //输出：[1,2]
    //
    //
    //提示：
    //
    //树中节点数目在范围 [0, 100] 内
    //-100 <= Node.val <= 100
    //
    //
    //进阶: 递归算法很简单，你可以通过迭代算法完成吗？
    //https://leetcode-cn.com/problems/binary-tree-inorder-traversal/
    public static void main(String[] args) {

        //输入：root = [1,null,2,3]
        //输出：[1,3,2]
        TreeNode94 node = new TreeNode94(1, null, new TreeNode94(2, new TreeNode94(3, null, null), null));
        InorderTraversal94 inorderTraversal = new InorderTraversal94();
        System.out.println(inorderTraversal.inorderTraversal(node));
    }

    public List<Integer> inorderTraversal(TreeNode94 root) {

        List<Integer> list = new ArrayList<>();
        fun(root, list);
        return list;
    }

    private void fun(TreeNode94 node, List<Integer> list) {

        if (node == null) return;

        if(node.left != null) fun(node.left, list);
        list.add(node.val);
        if(node.right != null) fun(node.right, list);
    }
}

class TreeNode94 {
    int val;
    TreeNode94 left;
    TreeNode94 right;
    TreeNode94() {}
    TreeNode94(int val) { this.val = val; }
    TreeNode94(int val, TreeNode94 left, TreeNode94 right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

// 执行结果： 通过
//执行用时： 0 ms , 在所有 Java 提交中击败了 100.00% 的用户
//内存消耗： 36.9 MB , 在所有 Java 提交中击败了 12.84% 的用户
