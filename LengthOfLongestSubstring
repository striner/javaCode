package com.striner.java.test;

public class LengthOfLongestSubstring3 {

    /**
     * 3. 无重复字符的最长子串
     * 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
     * <p>
     * 示例 1:
     * 输入: s = "abcabcbb"
     * 输出: 3
     * 解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
     * <p>
     * 示例 2:
     * 输入: s = "bbbbb"
     * 输出: 1
     * 解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
     * <p>
     * 示例 3:
     * 输入: s = "pwwkew"
     * 输出: 3
     * 解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     * 请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
     * <p>
     * 示例 4:
     * 输入: s = ""
     * 输出: 0
     * <p>
     * 提示：
     * 0 <= s.length <= 5 * 104
     * s 由英文字母、数字、符号和空格组成
     * <p>
     * 链接: https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/
     */


    public static void main(String[] args) {

        String s = "abcabcbb";
        LengthOfLongestSubstring3 length = new LengthOfLongestSubstring3();
        System.out.println(length.lengthOfLongestSubstring(s));
    }


    public int lengthOfLongestSubstring(String s) {

        int max = 0;
        int j = 0;
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {

            if (str.toString().equals("") || str.toString().indexOf(s.charAt(i)) == -1) {
                str.append(s.charAt(i));
            } else {
                j = str.lastIndexOf(s.charAt(i) + "") + 1;
                str = new StringBuilder(str.substring(j) + s.charAt(i));
            }
            max = Math.max(max, str.length());
        }
        return max;
    }

    //状态：通过
    //执行用时: 29 ms
    //内存消耗: 39.4 MB
}
