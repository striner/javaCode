package com.striner.java.leetcode.test01;

public class AddTwoNumbers2 {

    //2. 两数相加
    //给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
    //
    //请你将两个数相加，并以相同形式返回一个表示和的链表。
    //
    //你可以假设除了数字 0 之外，这两个数都不会以 0 开头。
    //
    //
    //
    //示例 1：
    //
    //
    //输入：l1 = [2,4,3], l2 = [5,6,4]
    //输出：[7,0,8]
    //解释：342 + 465 = 807.
    //示例 2：
    //
    //输入：l1 = [0], l2 = [0]
    //输出：[0]
    //示例 3：
    //
    //输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
    //输出：[8,9,9,9,0,0,0,1]
    //
    //
    //提示：
    //
    //每个链表中的节点数在范围 [1, 100] 内
    //0 <= Node.val <= 9
    //题目数据保证列表表示的数字不含前导零
    //https://leetcode-cn.com/problems/add-two-numbers/
    public static void main(String[] args) {

        //[9,9,9,9,9,9,9]
        //[9,9,9,9]
        ListNode2 l1 = new ListNode2(9, new ListNode2(9, new ListNode2(9, new ListNode2(9, new ListNode2(9, new ListNode2(9, new ListNode2(9)))))));
        ListNode2 l2 = new ListNode2(9, new ListNode2(9, new ListNode2(9, new ListNode2(9))));
        AddTwoNumbers2 addTwoNumbers2 = new AddTwoNumbers2();
        ListNode2 node = addTwoNumbers2.addTwoNumbers(l1, l2);
        while(node != null) {
            System.out.println(node.val + " - ");
            node = node.next;
        }
    }

    public ListNode2 addTwoNumbers(ListNode2 l1, ListNode2 l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;

        int next = 0; // 进位
        ListNode2 node = new ListNode2();
        ListNode2 cur = node;

        while (l1 != null && l2 != null) {
            int sum = l1.val + l2.val + next;
            next = sum / 10;
            cur.next = new ListNode2(sum % 10);
            l1 = l1.next;
            l2 = l2.next;
            cur = cur.next;
        }

        while (l1 != null) {
            if (next == 1) {
                int sum = l1.val + 1;
                next = sum / 10;
                cur.next = new ListNode2(sum % 10);

                l1 = l1.next;
                cur = cur.next;
            } else {
                cur.next = l1;
                break;
            }
        }

        while (l2 != null) {
            if (next == 1) {
                int sum = l2.val + 1;
                next = sum / 10;
                cur.next = new ListNode2(sum % 10);
                cur = cur.next;
                l2 = l2.next;
            } else {
                cur.next = l2;
                break;
            }
        }

        if(next == 1) {
            cur.next = new ListNode2(1);
        }

        return node.next;
    }
}

class ListNode2 {
    int val;
    ListNode2 next;

    ListNode2() {
    }

    ListNode2(int val) {
        this.val = val;
    }

    ListNode2(int val, ListNode2 next) {
        this.val = val;
        this.next = next;
    }
}

//执行结果： 通过
//执行用时： 2 ms , 在所有 Java 提交中击败了 97.12% 的用户
//内存消耗： 38.9 MB , 在所有 Java 提交中击败了 13.44% 的用户
