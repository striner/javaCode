package com.striner.java.test01;

import java.util.ArrayList;
import java.util.List;

public class SpiralOrder54 {

    //54. 螺旋矩阵
    //给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。
    //
    //
    //
    //示例 1：
    //
    //
    //输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
    //输出：[1,2,3,6,9,8,7,4,5]
    //示例 2：
    //
    //
    //输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
    //输出：[1,2,3,4,8,12,11,10,9,5,6,7]
    //
    //
    //提示：
    //
    //m == matrix.length
    //n == matrix[i].length
    //1 <= m, n <= 10
    //-100 <= matrix[i][j] <= 100
    //https://leetcode-cn.com/problems/spiral-matrix/
    public static void main(String[] args) {

        // [[1,2,3,4],[5,6,7,8],[9,10,11,12]]  [1,2,3,4,8,12,11,10,9,5,6,7]
        int[][] arr = new int[][]{{1,2,3,4},{5,6,7,8},{9,10,11,12}};
        SpiralOrder54 spiralOrder54 = new SpiralOrder54();
        System.out.println(spiralOrder54.spiralOrder(arr));
    }

    public List<Integer> spiralOrder(int[][] matrix) {

        List<Integer> result = new ArrayList<>();

        if (matrix.length == 0) return result;

        int left = 0;
        int right = matrix[0].length - 1;
        int top = 0;
        int bottom = matrix.length - 1;

        while (true) {

            for (int i = left; i <= right; i++) result.add(matrix[top][i]);
            if (++top > bottom) break;
            for (int j = top; j <= bottom; j++) result.add(matrix[j][right]);
            if (--right < left) break;
            for (int i = right; i >= left; i--) result.add(matrix[bottom][i]);
            if (--bottom < top) break;
            for (int j = bottom; j >= top; j--) result.add(matrix[j][left]);
            if (++left > right) break;
        }

        return result;
    }
}
//执行结果： 通过
//执行用时： 0 ms , 在所有 Java 提交中击败了 100.00% 的用户
//内存消耗： 36.4 MB , 在所有 Java 提交中击败了 85.49% 的用户
