package com.striner.java.leetcode.test01;

import java.util.Arrays;

public class Solve130 {

    //130. 被围绕的区域
    //给定一个二维的矩阵，包含 'X' 和 'O'（字母 O）。
    //找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。
    //
    //示例:
    //X X X X
    //X O O X
    //X X O X
    //X O X X
    //
    //运行你的函数后，矩阵变为：
    //
    //X X X X
    //X X X X
    //X X X X
    //X O X X
    //
    //解释:
    //被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

    //https://leetcode-cn.com/problems/surrounded-regions/
    public static void main(String[] args) {

        char[][] board = {{'X', 'X', 'X', 'X'}, {'X', 'O', 'O', 'X'}, {'X', 'X', 'O', 'X'}, {'X', 'O', 'X', 'X'}};
        char[][] board2 = {{'X','O','X','O','X','O'}, {'O','X','O','X','O','X'}, {'X','O','X','O','X','O'}, {'O','X','O','X','O','X'}};

        Solve130 solve130 = new Solve130();
        solve130.solve(board);
        System.out.println(Arrays.deepToString(board2));
    }

    public void solve(char[][] board) {

        if (board.length <= 2) return;

        int jMax = board[0].length - 1;
        int iMax = board.length - 1;

        // 边界遍历
        for (int i = 0; i <= iMax; i++) {
            if (board[i][0] == 'O') dfs(board, i, 0);
            if (board[i][jMax] == 'O') dfs(board, i, jMax);
        }

        for (int j = 0; j <= jMax; j++) {
            if (board[0][j] == 'O') dfs(board, 0, j);
            if (board[iMax][j] == 'O') dfs(board, iMax, j);
        }

        // 替换 O->X -->O
        for(int i = 0; i <= iMax; i++) {
            for(int j = 0; j <= jMax; j++) {
                if(board[i][j] == 'O') board[i][j] = 'X';
                if(board[i][j] == '-') board[i][j] = 'O';
            }
        }


    }

    private void dfs(char[][] board, int i, int j) {
        board[i][j] = '-';
        if (i + 1 < board.length && board[i + 1][j] == 'O') dfs(board, i + 1, j);
        if (i - 1 >= 0 && board[i - 1][j] == 'O') dfs(board, i - 1, j);
        if (j - 1 >= 0 && board[i][j - 1] == 'O') dfs(board, i, j - 1);
        if (j + 1 < board[0].length && board[i][j + 1] == 'O') dfs(board, i, j + 1);

    }
}

//执行结果： 通过
//执行用时： 1 ms , 在所有 Java 提交中击败了 99.97% 的用户
//内存消耗： 40.5 MB , 在所有 Java 提交中击败了 53.11% 的用户
