//大数乘法
//分治法
import java.util.Scanner;
public class Main {
	public static void main(String[] args) {
		System.out.println(multi("1234567890987654321666", "1234567890123456789555"));
		//System.out.println(new BigInteger("1234567890987654321666").multiply(new BigInteger("1234567890123456789555")));   //检验
	}

	public static String multi(String a, String b) {
		//出口 整数假设只有int类型
		if (a.length() <= 4 && b.length() <= 4) return Integer.parseInt(a) * Integer.parseInt(b) + "";
		
		if (a.length() > 4) {
			//分治
			int k = a.length()/2;
			String a1 = a.substring(0, k);
			String a2 = a.substring(k);
			
			return add(multi(a1, b) + zero(a2.length()),multi(a2, b));
		}
		return multi(b, a);  //b比a大则a,b交换
	}

	public static String zero(int n) {  //补零操作 n为需要补的个数
		if (n == 0) return "";
		if (n == 1) return "0";
		return zero(n/2) + zero(n/2) + zero(n%2);  //分治
	}

	public static String add(String a, String b) {   //大整数加法
		if (a.length() <= 8 && b.length() <= 8) return Integer.parseInt(a) + Integer.parseInt(b) + "";
		
		String a1 = "0";   //用于存储a前a.length()-8个数
		String a2 = a;  //用于存储a的后8位
		if (a.length() > 8) {
			a1 = a.substring(0, a.length() - 8);
			a2 = a.substring(a.length() - 8);
		}
		
		String b1 = "0";   //用于存储b前b.length()-8个数
		String b2 = b;  //用于存储b的后8位
		if (b.length() > 8) {
			b1 = b.substring(0, b.length() - 8);
			b2 = b.substring(b.length() - 8);
		}
		
		String t = add(a2, b2);
		while (t.length() < 8) t = "0" + t;  //若a的后8位与b的后8位之和的位数小于8位则前面补0
		if (t.length() > 8) return add(add(a1, b1), "1") + t.substring(1);  //如果t的位数大于8,则需进位,由于两个8位数之和最大为1开头的九位数,故进1
		return add(a1, b1) + t;  //如果t的长度刚好为8,无需其他操作,直接递归
	}
}
