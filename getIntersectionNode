package com.striner.java.test01;

public class GetIntersectionNode106 {

    // 160. 相交链表
    //编写一个程序，找到两个单链表相交的起始节点。
    //
    //示例 1：
    //输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
    //输出：Reference of the node with value = 8
    //输入解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。
    //
    //示例 2：
    //输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
    //输出：Reference of the node with value = 2
    //输入解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。
    //
    //示例 3：
    //输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
    //输出：null
    //输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。
    //解释：这两个链表不相交，因此返回 null。
    //
    //注意：
    //如果两个链表没有交点，返回 null.
    //在返回结果后，两个链表仍须保持原有的结构。
    //可假定整个链表结构中没有循环。
    //程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。
    //
    //https://leetcode-cn.com/problems/intersection-of-two-linked-lists/
    public static void main(String[] args) {

        // listA = [4,1,8,4,5], listB = [5,0,1,8,4,5]
        ListNode listA = new ListNode(4, new ListNode(1, new ListNode(8, new ListNode(4, new ListNode(5)))));
        ListNode listB = new ListNode(5, new ListNode(0, new ListNode(1, new ListNode(8, new ListNode(4, new ListNode(5))))));

        GetIntersectionNode106 getIntersectionNode = new GetIntersectionNode106();
        System.out.println(getIntersectionNode.getIntersectionNode(listA, listB));
    }

    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {

        // get length
        int len1 = 0;
        int len2 = 0;
        ListNode l1 = headA;
        ListNode l2 = headB;
        while(l1 != null) {
            len1 += 1;
            l1 = l1.next;
        }
        while(l2 != null) {
            len2 += 1;
            l2 = l2.next;
        }

        // cut
        l1 = headA;
        l2 = headB;
        int len = len1;
        if (len1 > len2) {
            for (int i = 0; i < len1 - len2; i++) l1 = l1.next;
            len = len2;
        }
        if (len2 > len1) {
            for (int i = 0; i < len2 - len1; i++) l2 = l2.next;
        }

        // get node
        for(int i = 0; i < len; i++) {
            if(l1 == l2) return l1;
            l1 = l1.next;
            l2 = l2.next;
        }

        return null;
    }
}

class ListNode106 {
    int val;
    ListNode next;
    ListNode106(int x) {
        val = x;
        next = null;
    }
}

//执行结果： 通过
//显示详情
//执行用时： 1 ms , 在所有 Java 提交中击败了 100.00% 的用户
//内存消耗： 41.3 MB , 在所有 Java 提交中击败了 42.17% 的用户
