package com.striner.java.leetcode.test01;

public class MaxArea11 {

    //11. 盛最多水的容器
    //给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
    //
    //找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
    //
    //返回容器可以储存的最大水量。
    //
    //说明：你不能倾斜容器。
    //
    //
    //
    //示例 1：
    //
    //
    //
    //输入：[1,8,6,2,5,4,8,3,7]
    //输出：49
    //解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
    //示例 2：
    //
    //输入：height = [1,1]
    //输出：1
    //
    //
    //提示：
    //
    //n == height.length
    //2 <= n <= 105
    //0 <= height[i] <= 104
    //https://leetcode-cn.com/problems/container-with-most-water/
    public static void main(String[] args) {

        //[1,8,6,2,5,4,8,3,7]
        MaxArea11 maxArea11 = new MaxArea11();
        System.out.println(maxArea11.maxArea(new int[]{1,8,6,2,5,4,8,3,7}));
    }

    public int maxArea(int[] height) {
        int i = 0;
        int j = height.length - 1;

        int max = 0;
        while(i < j) {

            int area = j - i;
            if(height[i] < height[j]) {
                area *= height[i];
                // 底部一样长的情况下，i++和j--后的底部一样长，所以数小的指针向内移动更优
                i++;
            } else {
                area *= height[j];
                j--;
            }
            max = Math.max(max, area);
        }
        return max;
    }
    //执行结果： 通过
    //执行用时： 3 ms , 在所有 Java 提交中击败了 92.97% 的用户
    //内存消耗： 51.5 MB , 在所有 Java 提交中击败了 67.68% 的用户
}
